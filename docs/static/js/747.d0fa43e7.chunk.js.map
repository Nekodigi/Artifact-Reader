{"version":3,"file":"static/js/747.d0fa43e7.chunk.js","mappings":"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","sources":["utils/func/string.ts","utils/consts/Artifact.ts","utils/consts/Stat.ts","utils/func/strToArtifact.ts","utils/func/artifactScan.ts","components/template/TemplateMatching.tsx"],"sourcesContent":["export const similarity = (s1: string, s2: string) => {\n  var longer = s1;\n  var shorter = s2;\n  if (s1.length < s2.length) {\n    longer = s2;\n    shorter = s1;\n  }\n  var longerLength = longer.length;\n  if (longerLength == 0) {\n    return 1.0;\n  }\n  return (longerLength - editDistance(longer, shorter)) / longerLength;\n};\n\nexport const editDistance = (s1: string, s2: string) => {\n  s1 = s1.toLowerCase();\n  s2 = s2.toLowerCase();\n\n  var costs = new Array();\n  for (var i = 0; i <= s1.length; i++) {\n    var lastValue = i;\n    for (var j = 0; j <= s2.length; j++) {\n      if (i == 0) costs[j] = j;\n      else {\n        if (j > 0) {\n          var newValue = costs[j - 1];\n          if (s1.charAt(i - 1) != s2.charAt(j - 1))\n            newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;\n          costs[j - 1] = lastValue;\n          lastValue = newValue;\n        }\n      }\n    }\n    if (i > 0) costs[s2.length] = lastValue;\n  }\n  return costs[s2.length];\n};\n\nexport const isAlphabet = (char: string) => {\n  return \"A\" <= char && char <= \"z\";\n};\n","export const setKey = [\n  \"Adventurer\", //Adventurer\n  \"ArchaicPetra\", //Archaic Petra\n  \"Berserker\", //Berserker\n  \"BlizzardStrayer\", //Blizzard Strayer\n  \"BloodstainedChivalry\", //Bloodstained Chivalry\n  \"BraveHeart\", //Brave Heart\n  \"CrimsonWitchOfFlames\", //Crimson Witch of Flames\n  \"DeepwoodMemories\", //Deepwood Memories\n  \"DefendersWill\", //Defender's Will\n  \"DesertPavilionChronicle\", //Desert Pavilion Chronicle\n  \"EchoesOfAnOffering\", //Echoes of an Offering\n  \"EmblemOfSeveredFate\", //Emblem of Severed Fate\n  \"FlowerOfParadiseLost\", //Flower of Paradise Lost\n  \"Gambler\", //Gambler\n  \"GildedDreams\", //Gilded Dreams\n  \"GladiatorsFinale\", //Gladiator's Finale\n  \"HeartOfDepth\", //Heart of Depth\n  \"HuskOfOpulentDreams\", //Husk of Opulent Dreams\n  \"Instructor\", //Instructor\n  \"Lavawalker\", //Lavawalker\n  \"LuckyDog\", //Lucky Dog\n  \"MaidenBeloved\", //Maiden Beloved\n  \"MartialArtist\", //Martial Artist\n  \"NoblesseOblige\", //Noblesse Oblige\n  \"OceanHuedClam\", //Ocean-Hued Clam\n  \"PaleFlame\", //Pale Flame\n  \"PrayersForDestiny\", //Prayers for Destiny\n  \"PrayersForIllumination\", //Prayers for Illumination\n  \"PrayersForWisdom\", //Prayers for Wisdom\n  \"PrayersToSpringtime\", //Prayers to Springtime\n  \"ResolutionOfSojourner\", //Resolution of Sojourner\n  \"RetracingBolide\", //Retracing Bolide\n  \"Scholar\", //Scholar\n  \"ShimenawasReminiscence\", //Shimenawa's Reminiscence\n  \"TenacityOfTheMillelith\", //Tenacity of the Millelith\n  \"TheExile\", //The Exile\n  \"ThunderingFury\", //Thundering Fury\n  \"Thundersoother\", //Thundersoother\n  \"TinyMiracle\", //Tiny Miracle\n  \"TravelingDoctor\", //Traveling Doctor\n  \"VermillionHereafter\", //Vermillion Hereafter\n  \"ViridescentVenerer\", //Viridescent Venerer\n  \"WanderersTroupe\",\n] as const;\nexport type setKeyType = typeof setKey[number];\n\nexport const slotKey = [\n  \"flower\",\n  \"plume\",\n  \"sands\",\n  \"goblet\",\n  \"circlet\",\n] as const;\nexport type slotKeyType = typeof slotKey[number];\n\n//Wanderer's Troupe\n//   Adventurer: { name: { en: \"Adventurer\", ja: \"\" } },\n//   ArchaicPetra: { name: { en: \"Archaic Petra\", ja: \"\" } },\n//   Berserker: { name: { en: \"Berserker\", ja: \"\" } },\n//   BlizzardStrayer: { name: { en: \"Blizzard Strayer\", ja: \"\" } },\n//   BloodstainedChivalry: { name: { en: \"Bloodstained Chivalry\", ja: \"\" } },\n//   BraveHeart: { name: { en: \"Brave Heart\", ja: \"\" } },\n//   CrimsonWitchOfFlames: { name: { en: \"Crimson Witch of Flames\", ja: \"\" } },\n//   DeepwoodMemories: { name: { en: \"Deepwood Memories\", ja: \"\" } },\n//   DefendersWill: { name: { en: \"Defender's Will\", ja: \"\" } },\n//   DesertPavilionChronicle: {\n//     name: { en: \"Desert Pavilion Chronicle\", ja: \"\" },\n//   },\n//   EchoesOfAnOffering: { name: { en: \"Echoes of an Offering\", ja: \"\" } },\n//   EmblemOfSeveredFate: { name: { en: \"Emblem of Severed Fate\", ja: \"\" } },\n//   FlowerOfParadiseLost: { name: { en: \"Flower of Paradise Lost\", ja: \"\" } },\n//   Gambler: { name: { en: \"Gambler\", ja: \"\" } },\n//   GildedDreams: { name: { en: \"Gilded Dreams\", ja: \"\" } },\n//   GladiatorsFinale: { name: { en: \"Gladiator's Finale\", ja: \"\" } },\n//   HeartOfDepth: { name: { en: \"Heart of Depth\", ja: \"\" } },\n//   HuskOfOpulentDreams: { name: { en: \"Husk of Opulent Dreams\", ja: \"\" } },\n//   Instructor: { name: { en: \"Instructor\", ja: \"\" } },\n//   Lavawalker: { name: { en: \"Lavawalker\", ja: \"\" } },\n//   LuckyDog: { name: { en: \"Lucky Dog\", ja: \"\" } },\n//   MaidenBeloved: { name: { en: \"Maiden Beloved\", ja: \"\" } },\n//   MartialArtist: { name: { en: \"Martial Artist\", ja: \"\" } },\n//   NoblesseOblige: { name: { en: \"Noblesse Oblige\", ja: \"\" } },\n//   OceanHuedClam: { name: { en: \"Ocean-Hued Clam\", ja: \"\" } },\n//   PaleFlame: { name: { en: \"Pale Flame\", ja: \"\" } },\n//   PrayersForDestiny: { name: { en: \"Prayers for Destiny\", ja: \"\" } },\n//   PrayersForIllumination: { name: { en: \"Prayers for Illumination\", ja: \"\" } },\n//   PrayersForWisdom: { name: { en: \"Prayers for Wisdom\", ja: \"\" } },\n//   PrayersToSpringtime: { name: { en: \"Prayers to Springtime\", ja: \"\" } },\n//   ResolutionOfSojourner: { name: { en: \"Resolution of Sojourner\", ja: \"\" } },\n//   RetracingBolide: { name: { en: \"Retracing Bolide\", ja: \"\" } },\n//   Scholar: { name: { en: \"Scholar\", ja: \"\" } },\n//   ShimenawasReminiscence: { name: { en: \"Shimenawa's Reminiscence\", ja: \"\" } },\n//   TenacityOfTheMillelith: { name: { en: \"Tenacity of the Millelith\", ja: \"\" } },\n//   TheExile: { name: { en: \"The Exile\", ja: \"\" } },\n//   ThunderingFury: { name: { en: \"Thundering Fury\", ja: \"\" } },\n//   Thundersoother: { name: { en: \"Thundersoother\", ja: \"\" } },\n//   TinyMiracle: { name: { en: \"Tiny Miracle\", ja: \"\" } },\n//   TravelingDoctor: { name: { en: \"Traveling Doctor\", ja: \"\" } },\n//   VermillionHereafter: { name: { en: \"Vermillion Hereafter\", ja: \"\" } },\n//   ViridescentVenerer: { name: { en: \"Viridescent Venerer\", ja: \"\" } },\n//   WanderersTroupe: { name: { en: \"Wanderer's Troupe\", ja: \"\" } },\n// };\n","//table can be replaced by min and step?\n\nconst statDef = {\n  hp: {\n    weight: 0,\n    abri: \"HP \",\n    name: { en: \"HP\", ja: \"HP\" },\n    table: [209.13, 239.0, 268.88, 298.75],\n  },\n  hp_: {\n    weight: 0,\n    name: { en: \"HP%\", ja: \"HP%\" },\n    abri: \"HP%\",\n    table: [4.08, 4.66, 5.25, 5.83],\n  },\n  atk: {\n    weight: 0,\n    name: { en: \"ATK\", ja: \"攻撃力\" },\n    table: [13.62, 15.56, 17.51, 19.45],\n  },\n  atk_: {\n    weight: 1,\n    name: { en: \"ATK%\", ja: \"攻撃力%\" },\n    table: [4.08, 4.66, 5.25, 5.83],\n  },\n  def: {\n    weight: 0,\n    name: { en: \"DEF\", ja: \"防御力\" },\n    table: [16.2, 18.52, 20.83, 23.15],\n  },\n  def_: {\n    weight: 0,\n    name: { en: \"DEF%\", ja: \"防御力%\" },\n    table: [5.1, 5.83, 6.56, 7.29],\n  },\n  eleMas: {\n    weight: 0,\n    name: { en: \"Elemental Mastery\", ja: \"元素熟知\" },\n    table: [16.32, 18.65, 20.98, 23.31],\n  },\n  enerRech_: {\n    weight: 0,\n    name: { en: \"Energy Recharge%\", ja: \"元素チャージ効率%\" },\n    table: [4.53, 5.18, 5.83, 6.48],\n  },\n  heal_: {\n    weight: 0,\n    name: { en: \"Healing Bonus\", ja: \"与える治療効果\" },\n    table: [4.53, 5.18, 5.83, 6.48],\n  },\n  critRate_: {\n    weight: 2,\n    name: { en: \"CRIT Rate%\", ja: \"会心率%\" },\n    table: [2.72, 3.11, 3.5, 3.89],\n  },\n  critDMG_: {\n    weight: 1,\n    name: { en: \"CRIT DMG%\", ja: \"会心ダメージ%\" },\n    table: [5.44, 6.22, 6.99, 7.77],\n  },\n\n  physical_dmg_: {\n    weight: 0,\n    name: { en: \"Physical DMG Bonus\", ja: \"物理ダメージバフ\" },\n    table: [0, 0, 0, 0],\n  },\n  anemo_dmg_: {\n    weight: 0,\n    name: { en: \"Anemo DMG Bonus\", ja: \"風元素ダメージ\" },\n    table: [0, 0, 0, 0],\n  },\n  geo_dmg_: {\n    weight: 0,\n    name: { en: \"Geo DMG Bonus\", ja: \"岩元素ダメージ\" },\n    table: [0, 0, 0, 0],\n  },\n  electro_dmg_: {\n    weight: 0,\n    name: { en: \"Electro DMG Bonus\", ja: \"雷元素ダメージ\" },\n    table: [0, 0, 0, 0],\n  },\n  hydro_dmg_: {\n    weight: 0,\n    name: { en: \"Hydro DMG Bonus\", ja: \"水元素ダメージ\" },\n    table: [0, 0, 0, 0],\n  },\n  pyro_dmg_: {\n    weight: 0,\n    name: { en: \"Pyro DMG Bonus\", ja: \"炎元素ダメージ\" },\n    table: [0, 0, 0, 0],\n  },\n  cryo_dmg_: {\n    weight: 0,\n    name: { en: \"Cryo DMG Bonus\", ja: \"氷元素ダメージ\" },\n    table: [0, 0, 0, 0],\n  },\n  dendro_dmg_: {\n    weight: 0,\n    name: { en: \"Dendro DMG Bonus\", ja: \"草元素ダメージ\" },\n    table: [0, 0, 0, 0],\n  },\n  ERR: {\n    weight: 0,\n    name: { en: \"Substat\", ja: \"サブステータス\" },\n    icon: undefined,\n    table: [0, 0, 0, 0],\n  },\n} as const;\n\nexport { statDef };\n\nexport const statKey = [\n  \"hp\",\n  \"hp_\",\n  \"atk\",\n  \"atk_\",\n  \"def\",\n  \"def_\",\n  \"eleMas\",\n  \"enerRech_\",\n  \"heal_\",\n  \"critRate_\",\n  \"critDMG_\",\n  \"physical_dmg_\",\n  \"anemo_dmg_\",\n  \"geo_dmg_\",\n  \"electro_dmg_\",\n  \"hydro_dmg_\",\n  \"pyro_dmg_\",\n  \"cryo_dmg_\",\n  \"dendro_dmg_\",\n];\nexport type statKeyType = keyof typeof statDef;\n","import { setKey, setKeyType, slotKey, slotKeyType } from \"../consts/Artifact\";\nimport { similarity } from \"./string\";\n//import { Language } from \"genshin-db\";\nimport artifacts from \"../consts/genshindb-partial.json\";\nimport { substatKey } from \"../consts/Substat\";\nimport { statDef, statKey, statKeyType } from \"../consts/Stat\";\nimport { Language } from \"../types/Language\";\nimport { ArtifactDB } from \"../types/Artifact\";\n\nexport type str2artifactSetOut = {\n  key: setKeyType;\n  slot: slotKeyType;\n  confidence: number;\n};\n\nexport const str2artifactSet = (\n  str: string,\n  lang: Language\n): str2artifactSetOut => {\n  let maxSim = 0;\n  let key_: setKeyType = \"Adventurer\";\n  let slot_: slotKeyType = \"circlet\";\n\n  setKey.forEach((key) => {\n    // let a = artifacts(key, {\n    //   resultLanguage: lang,\n    // })!;\n    let a = artifacts[key] as ArtifactDB;\n    slotKey.forEach((slot) => {\n      if (a[slot] !== undefined) {\n        let sim = similarity(str, a[slot]!.name[lang]);\n        if (sim > maxSim) {\n          key_ = key;\n          slot_ = slot;\n          maxSim = sim;\n        }\n      }\n    });\n  });\n  return { key: key_, slot: slot_, confidence: maxSim };\n};\n\nexport type str2statOut = {\n  key: statKeyType;\n  value: number;\n  confidence: number;\n};\n\nexport const str2stats = (str: string, lang: Language): str2statOut[] => {\n  var strs = str.split(\"\\n\");\n  strs = strs.filter((str_) => str_ !== \"\");\n  var targets = [];\n  for (let i = 0; i < strs.length; i++) {\n    let str_ = strs[i];\n    if (\n      str_.replace(/\\s/g, \"\").includes(\"Set\") ||\n      str_.replace(/\\s/g, \"\").includes(\"セット\")\n    ) {\n      break;\n    }\n    targets.push(str_);\n  }\n\n  return targets.map((str) => str2stat(str, lang));\n};\n\nexport const str2stat = (str: string, lang: Language): str2statOut => {\n  let datas = str.split(\"+\"); //plus could be lost\n  if (datas.length === 1) {\n    console.log(\"+ error\");\n    //could be plus detection ERROR\n    for (let i = 0; i < datas[0].length; i++) {\n      if (\"⓪①②③④⑤⑥⑦⑧⑨0123456789\".includes(datas[0][i])) {\n        datas[1] = datas[0].substring(i);\n        datas[0] = datas[0].substring(0, i);\n        console.log(`split at ${i} ${datas[0]} ${datas[1]}`);\n        break;\n      }\n    }\n  }\n\n  let key_ = datas[0] + (str.includes(\"%\") ? \"%\" : \"\");\n  var value_ = str.includes(\"%\") ? datas[1].split(\"%\")[0] : datas[1]; //10% => 10\n  let maxSim = 0;\n  let key: statKeyType = \"ERR\";\n\n  const replaceList = [\n    [\"⓪\", \"0\"],\n    [\"①\", \"1\"],\n    [\"②\", \"2\"],\n    [\"③\", \"3\"],\n    [\"④\", \"4\"],\n    [\"⑤\", \"5\"],\n    [\"⑥\", \"6\"],\n    [\"⑦\", \"7\"],\n    [\"⑧\", \"8\"],\n    [\"⑨\", \"9\"],\n  ];\n  key_ = key_.replaceAll(\" \", \"\").replaceAll(\"カ\", \"力\");\n  replaceList.forEach((replaceItem) => {\n    value_ = value_.replaceAll(replaceItem[0], replaceItem[1]);\n  });\n\n  if (lang === \"en\") {\n    statKey.forEach((key_i) => {\n      let sim = similarity(statDef[key_i as statKeyType].name[lang], key_);\n      if (sim > maxSim) {\n        key = key_i as statKeyType;\n        maxSim = sim;\n      }\n    });\n  } else {\n    console.log(str, \"JP\");\n    str = str.replace(/\\s/g, \"\");\n    //some letter could be lost.\n    //use nearest!\n    statKey.forEach((key_i) => {\n      let sim = similarity(statDef[key_i as statKeyType].name[lang], key_);\n      if (sim > maxSim) {\n        key = key_i as statKeyType;\n        maxSim = sim;\n      }\n    });\n  }\n  let value = Number(value_);\n\n  console.log(key_, value_, value, key);\n\n  statKey.forEach((key_) => {\n    let sim = similarity(statDef[key_ as statKeyType].name[lang], str);\n    if (sim > maxSim) {\n      key = key_ as statKeyType;\n      maxSim = sim;\n    }\n  });\n  return { key, value, confidence: maxSim };\n};\n","import cv, { MinMaxLoc, Rect } from \"@techstark/opencv-js\";\nimport Tesseract, { createWorker } from \"tesseract.js\";\nimport { setKeyType, slotKeyType } from \"../consts/Artifact\";\nimport { statKeyType } from \"../consts/Stat\";\nimport { ArtifactType } from \"../types/Artifact\";\nimport { Language } from \"../types/Language\";\nimport { SubstatType } from \"../types/Substat\";\nimport { isAlphabet } from \"./string\";\nimport { str2artifactSet, str2stat, str2stats } from \"./strToArtifact\";\n\nexport type ArtifactScanOut = {\n  setKey: ScanResSetKey;\n  rarity: ScanResNum;\n  level: ScanResNum;\n  slotKey: ScanResSlotKey;\n  mainstatKey: ScanResStatKey;\n  substats: ScanResStat[];\n};\n\nexport const ScanRes2GOOD = (scanned: ArtifactScanOut) => {\n  return {\n    setKey: scanned.setKey.key,\n    rarity: scanned.rarity.value,\n    level: scanned.level.value,\n    slotKey: scanned.slotKey.value,\n    mainstatKey: scanned.mainstatKey.key,\n    substats: scanned.substats.map((substat) => {\n      return { key: substat.key, value: substat.value } as SubstatType;\n    }),\n  } as ArtifactType;\n};\n\nexport const ArtifactScan = async (\n  src: cv.Mat,\n  scale: number,\n  left: cv.Mat,\n  right: cv.Mat,\n  mid: cv.Mat,\n  buf: React.RefObject<HTMLCanvasElement>\n) => {\n  let strs = await ArtifactScanStr(src, scale, left, right, mid, buf);\n  console.log(strs);\n  let lang: Language = isAlphabet(strs.name.value.charAt(0)) ? \"en\" : \"ja\";\n  let res = {} as ArtifactScanOut;\n  let set = str2artifactSet(strs.name.value, lang);\n  res.setKey = { key: set.key, confidence: set.confidence };\n  res.rarity = {\n    value: strs.star.value.replace(/\\s/g, \"\").length,\n    confidence: strs.star.confidence,\n  };\n  //could compare with main stat and improve accuracy\n  res.level = {\n    value: Number(strs.level.value.replace(/^\\D+/g, \"\")),\n    confidence: strs.level.confidence,\n  };\n  let mainstat = str2stat(\n    strs.mainKey.value + \"+\" + strs.mainValue.value,\n    lang\n  );\n  res.mainstatKey = { key: mainstat.key, confidence: mainstat.confidence };\n  res.slotKey = { value: set.slot, confidence: set.confidence };\n\n  res.substats = str2stats(strs.substat.value, lang);\n  return res;\n};\n\n//scale change sample size: larger precise, smaller faster\nexport type ArtifactScanStrOut = {\n  name: ScanRes;\n  slot: ScanRes;\n  mainKey: ScanRes;\n  mainValue: ScanRes;\n  star: ScanRes;\n  level: ScanRes;\n  substat: ScanRes;\n};\nexport const ArtifactScanStr = async (\n  src_: cv.Mat,\n  scale: number,\n  left: cv.Mat,\n  right: cv.Mat,\n  mid: cv.Mat,\n  buf: React.RefObject<HTMLCanvasElement>\n) => {\n  let src = new cv.Mat();\n  src_.copyTo(src);\n\n  let res = {} as ArtifactScanStrOut;\n\n  let aspect = src.size().width / src.size().height;\n  cv.resize(src, src, new cv.Size(1280 * scale, (1280 * scale) / aspect)); //* RESIZE FOR FASTER RES,\n  console.log(src.size());\n  let color = new cv.Scalar(255, 0, 0, 255);\n\n  let dst = new cv.Mat();\n  let mask = new cv.Mat();\n  cv.matchTemplate(src, right, dst, cv.TM_CCOEFF_NORMED, mask);\n  let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\n  let maxPoint = result.maxLoc;\n\n  let point = new cv.Point(maxPoint.x + right.cols, maxPoint.y + right.rows);\n  cv.rectangle(src, maxPoint, point, color, 2, cv.LINE_8, 0);\n  console.log(\"img 0 match\");\n\n  cv.matchTemplate(src, left, dst, cv.TM_CCOEFF, mask);\n  result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\n  let maxPoint2 = result.maxLoc;\n\n  let point2 = new cv.Point(maxPoint2.x + left.cols, maxPoint2.y + left.rows);\n  cv.rectangle(src, maxPoint2, point2, color, 2, cv.LINE_8, 0);\n  console.log(\"img 1 match\");\n\n  let slimRect = new cv.Rect(\n    maxPoint2.x,\n    0,\n    point.x - maxPoint2.x,\n    src.size().height\n  );\n  let slimImg = src.roi(slimRect);\n  //*RESIZE AFTER CLOP!!!!!!!!!\n  aspect = slimImg.size().width / slimImg.size().height;\n\n  cv.resize(slimImg, slimImg, new cv.Size(352 * scale, (352 * scale) / aspect));\n\n  cv.matchTemplate(slimImg, mid, dst, cv.TM_CCOEFF, mask);\n  result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\n  maxPoint = result.maxLoc;\n\n  point = new cv.Point(maxPoint.x + mid.cols, maxPoint.y + mid.rows);\n  cv.rectangle(slimImg, maxPoint, point, color, 2, cv.LINE_8, 0);\n\n  console.log(\"slimmed\");\n\n  let midSeparator = maxPoint.y + mid.rows / 2;\n  let topHalfHeight = 189;\n  let topHalfBottom = 156;\n  let topHalfR = new cv.Rect(\n    12,\n    midSeparator - topHalfHeight * scale,\n    328 * scale,\n    (topHalfHeight + topHalfBottom) * scale\n  );\n  let trimmedImg = slimImg.roi(topHalfR);\n  cv.cvtColor(trimmedImg, trimmedImg, cv.COLOR_BGR2GRAY);\n\n  console.log(\"trimmed\");\n\n  let name1p = new cv.Point(17 * scale, 6 * scale);\n  let name2p = new cv.Point((17 + 295) * scale, (6 + 26) * scale);\n  let part1p = new cv.Point(16 * scale, 46 * scale);\n  let part2p = new cv.Point((16 + 130) * scale, (46 + 18) * scale);\n  let mainKey1p = new cv.Point(16 * scale, 100 * scale);\n  let mainKey2p = new cv.Point((16 + 130) * scale, (100 + 18) * scale);\n  let mainValue1p = new cv.Point(16 * scale, 118 * scale);\n  let mainValue2p = new cv.Point((16 + 102) * scale, (118 + 32) * scale);\n  let star1p = new cv.Point(16 * scale, 156 * scale);\n  let star2p = new cv.Point((16 + 116) * scale, (156 + 24) * scale);\n  let level1p = new cv.Point(24 * scale, 208 * scale);\n  let level2p = new cv.Point((24 + 32) * scale, (208 + 16) * scale);\n  let substat1p = new cv.Point(32 * scale, 237 * scale);\n  let substat2p = new cv.Point((32 + 198) * scale, (237 + 106) * scale);\n\n  console.log(\"showTextImg\");\n\n  const worker = await createWorker({\n    logger: (m) => console.log(m), // Add logger here\n  });\n  await worker.loadLanguage(\"eng\");\n  await worker.initialize(\"eng\");\n  console.log(\"worker initialized\");\n  const fname = async () => {\n    console.log(\"name trim\");\n    imshowTrimmed(buf, trimmedImg, 0.75, -180, name1p, name2p);\n    console.log(\"name recog\");\n    let result = await worker.recognize(buf.current!.toDataURL()); //, \"jpn\"\n    console.log(\"name recog fin\");\n    res.name = { value: result.data.text, confidence: result.data.confidence };\n    console.log(\"name fin\");\n    //cv.rectangle(trimmedImg, name1p, name2p, color, 2, cv.LINE_8, 0);\n  };\n  const fslot = async () => {\n    imshowTrimmed(buf, trimmedImg, 1, -180, part1p, part2p);\n    let result = await worker.recognize(buf.current!.toDataURL()); //, \"jpn\"\n    res.slot = { value: result.data.text, confidence: result.data.confidence };\n    console.log(\"slot fin\");\n    //cv.rectangle(trimmedImg, part1p, part2p, color, 2, cv.LINE_8, 0);\n  };\n\n  const fmainKey = async () => {\n    imshowTrimmed(buf, trimmedImg, 1, -135, mainKey1p, mainKey2p);\n    let result = await worker.recognize(buf.current!.toDataURL()); //, \"jpn\" //nograyscale\n    res.mainKey = {\n      value: result.data.text,\n      confidence: result.data.confidence,\n    };\n    //cv.rectangle(trimmedImg, mainKey1p, mainKey2p, color, 2, cv.LINE_8, 0);\n  };\n  const fmainValue = async () => {\n    imshowTrimmed(buf, trimmedImg, 0.75, -180, mainValue1p, mainValue2p);\n    let result = await worker.recognize(buf.current!.toDataURL());\n    res.mainValue = {\n      value: result.data.text,\n      confidence: result.data.confidence,\n    };\n    //cv.rectangle(trimmedImg, mainValue1p, mainValue2p, color, 2, cv.LINE_8, 0);\n  };\n\n  const fstar = async () => {\n    imshowTrimmed(buf, trimmedImg, 1, -150, star1p, star2p);\n    let result = await worker.recognize(buf.current!.toDataURL()); //, \"chi_tra\"\n    res.star = { value: result.data.text, confidence: result.data.confidence };\n    //cv.rectangle(trimmedImg, star1p, star2p, color, 2, cv.LINE_8, 0);\n  };\n\n  const flevel = async () => {\n    imshowTrimmed(buf, trimmedImg, 1, -150, level1p, level2p);\n    let result = await worker.recognize(buf.current!.toDataURL()); //nograyscale\n    res.level = { value: result.data.text, confidence: result.data.confidence };\n    //cv.rectangle(trimmedImg, level1p, level2p, color, 2, cv.LINE_8, 0);\n  };\n\n  const fsubstat = async () => {\n    imshowTrimmed(buf, trimmedImg, 1, 140, substat1p, substat2p);\n    let result = await worker.recognize(buf.current!.toDataURL()); //, \"jpn\"\n    res.substat = {\n      value: result.data.text,\n      confidence: result.data.confidence,\n    };\n    //cv.rectangle(trimmedImg, substat1p, substat2p, color, 2, cv.LINE_8, 0);\n  };\n\n  console.log(\"Start tesseract\");\n  await fname();\n  console.log(\"name end\");\n  await fslot();\n  console.log(\"slot end\");\n  await fmainKey();\n  await fmainValue();\n  console.log(\"main value end\");\n  await fstar();\n  await flevel();\n  await fsubstat();\n  console.log(\"read end\");\n  await worker.terminate();\n\n  console.log(\"end tesseract\");\n  return res;\n};\n\nconst imshowTrimmed = (\n  ref: React.RefObject<HTMLCanvasElement>,\n  src: cv.Mat,\n  scale: number,\n  threshold: number,\n  p1: cv.Point,\n  p2: cv.Point\n) => {\n  let i = src.roi(new Rect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y));\n  cv.resize(i, i, new cv.Size(i.size().width * scale, i.size().height * scale));\n  cv.threshold(\n    i,\n    i,\n    Math.abs(threshold),\n    255,\n    threshold >= 0 ? cv.THRESH_BINARY : cv.THRESH_BINARY_INV\n  );\n  cv.imshow(ref.current!, i);\n};\n\nexport type ScanRes = {\n  value: string;\n  confidence: number;\n};\n\nexport type ScanResSlotKey = {\n  value: slotKeyType;\n  confidence: number;\n};\nexport type ScanResNum = {\n  value: number;\n  confidence: number;\n};\n\nexport type ScanResSetKey = {\n  key: setKeyType;\n  confidence: number;\n};\n\nexport type ScanResStat = {\n  key: statKeyType;\n  value: number;\n  confidence: number;\n};\n\nexport type ScanResStatKey = {\n  key: statKeyType;\n  confidence: number;\n};\n","import { Mat, MinMaxLoc, Rect } from \"@techstark/opencv-js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport cv from \"@techstark/opencv-js\";\nimport Tesseract from \"tesseract.js\";\nimport { ArtifactScan, ScanRes2GOOD } from \"../../utils/func/artifactScan\";\nimport { Container, Typography } from \"@mui/material\";\n\nconst TemplateMatching = () => {\n  const targetImgRef = useRef<HTMLCanvasElement>(null);\n  const templateImgRef = useRef<HTMLCanvasElement>(null);\n  const slimImgRef = useRef<HTMLCanvasElement>(null);\n  const trimmedImgRef = useRef<HTMLCanvasElement>(null);\n  const nameImgRef = useRef<HTMLCanvasElement>(null);\n  const partImgRef = useRef<HTMLCanvasElement>(null);\n  const mainKeyImgRef = useRef<HTMLCanvasElement>(null);\n  const mainValueImgRef = useRef<HTMLCanvasElement>(null);\n  const starImgRef = useRef<HTMLCanvasElement>(null);\n  const levelImgRef = useRef<HTMLCanvasElement>(null);\n  const substatImgRef = useRef<HTMLCanvasElement>(null);\n  const dummyImgRef = useRef<HTMLCanvasElement>(null);\n  const [name, setName] = useState(\"name\");\n  const [part, setPart] = useState(\"part\");\n  const [mainKey, setMainKey] = useState(\"mainKey\");\n  const [mainValue, setMainValue] = useState(\"mainValue\");\n  const [star, setStar] = useState(\"star\");\n  const [level, setLevel] = useState(\"level\");\n  const [substat, setSubstat] = useState(\"substat\");\n  const [good, setGood] = useState(\"\");\n\n  const [img, setImg] = useState<Mat | null>(null);\n  const [templateImgs, setTemplateImgs] = useState<(Mat | null)[]>([\n    null,\n    null,\n  ]); //this will be error cv is not initialized at first\n\n  //PIPELINE\n  //target => [targetSM, [LEFT, RIGHT]] => [slim] => [trimmed](just have to know top corner?)\n  //if width > height\n  //targetSM, (1280, 720)\n  //else\n  //targetSM, preserve\n  //slim width: 272? padding: 20\n\n  let scale = 1.5; //small faster large precise\n\n  useEffect(() => {\n    if (img === null || templateImgs[0] !== null) return;\n    const loadTemplate = async () => {\n      let i1 = await imreadUrl(\"template/right.png\");\n      cv.resize(\n        i1,\n        i1,\n        new cv.Size(i1.size().width * scale, i1.size().height * scale)\n      );\n      let i2 = await imreadUrl(\"template/left.png\");\n      cv.resize(\n        i2,\n        i2,\n        new cv.Size(i2.size().width * scale, i2.size().height * scale)\n      );\n      let i3 = await imreadUrl(\"template/mid.png\");\n      cv.resize(\n        i3,\n        i3,\n        new cv.Size(i3.size().width * scale, i3.size().height * scale)\n      );\n      setTemplateImgs([i1, i2, i3]);\n      console.log(\"SET IMAGE\");\n    };\n    loadTemplate();\n  }, [img]);\n\n  useEffect(() => {\n    if (\n      img === null ||\n      templateImgs[0] === null ||\n      templateImgs[1] === null ||\n      templateImgs[2] === null\n    )\n      return;\n    const t = async () => {\n      let res = await ArtifactScan(\n        img,\n        scale,\n        templateImgs[1]!,\n        templateImgs[0]!,\n        templateImgs[2]!,\n        nameImgRef\n      );\n      console.log(res);\n      console.log(ScanRes2GOOD(res));\n      setGood(JSON.stringify(ScanRes2GOOD(res), null, 4));\n      //img will break after reading??\n    };\n\n    //visualScan(img, templateImgs[1]!, templateImgs[0]!, templateImgs[2]!);\n    t();\n\n    //visualScan(img, templateImgs[1]!, templateImgs[0]!, templateImgs[2]!);\n\n    //visualScan(img, templateImgs[1], templateImgs[0], templateImgs[2]);\n  }, [img, templateImgs]);\n\n  const visualScan = (\n    img_: cv.Mat,\n    left: cv.Mat,\n    right: cv.Mat,\n    mid: cv.Mat\n  ) => {\n    let img = new cv.Mat();\n    img_.copyTo(img);\n    let aspect = img.size().width / img.size().height;\n    cv.resize(img, img, new cv.Size(1280 * scale, (1280 * scale) / aspect)); //* RESIZE FOR FASTER RES,\n    console.log(img.size());\n    let color = new cv.Scalar(255, 0, 0, 255);\n\n    let dst = new cv.Mat();\n    let mask = new cv.Mat();\n    cv.matchTemplate(img, right, dst, cv.TM_CCOEFF_NORMED, mask);\n    let result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\n    let maxPoint = result.maxLoc;\n\n    let point = new cv.Point(maxPoint.x + right.cols, maxPoint.y + right.rows);\n    cv.rectangle(img, maxPoint, point, color, 2, cv.LINE_8, 0);\n    console.log(\"img 0 match\");\n\n    cv.matchTemplate(img, left, dst, cv.TM_CCOEFF, mask);\n    result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\n    let maxPoint2 = result.maxLoc;\n\n    let point2 = new cv.Point(maxPoint2.x + left.cols, maxPoint2.y + left.rows);\n    cv.rectangle(img, maxPoint2, point2, color, 2, cv.LINE_8, 0);\n    console.log(\"img 1 match\");\n\n    cv.imshow(targetImgRef.current!, img);\n    cv.imshow(templateImgRef.current!, right);\n\n    let slimRect = new cv.Rect(\n      maxPoint2.x,\n      0,\n      point.x - maxPoint2.x,\n      img.size().height\n    );\n    let slimImg = img.roi(slimRect);\n    //*RESIZE AFTER CLOP!!!!!!!!!\n    aspect = slimImg.size().width / slimImg.size().height;\n\n    cv.resize(\n      slimImg,\n      slimImg,\n      new cv.Size(352 * scale, (352 * scale) / aspect)\n    );\n\n    cv.matchTemplate(slimImg, mid, dst, cv.TM_CCOEFF, mask);\n    result = cv.minMaxLoc(dst, mask) as any as MinMaxLoc;\n    maxPoint = result.maxLoc;\n\n    point = new cv.Point(maxPoint.x + mid.cols, maxPoint.y + mid.rows);\n    cv.rectangle(slimImg, maxPoint, point, color, 2, cv.LINE_8, 0);\n\n    console.log(\"slimmed\");\n    cv.imshow(slimImgRef.current!, slimImg);\n\n    let midSeparator = maxPoint.y + mid.rows / 2;\n    let topHalfHeight = 189;\n    let topHalfBottom = 156;\n    let topHalfR = new cv.Rect(\n      12,\n      midSeparator - topHalfHeight * scale,\n      328 * scale,\n      (topHalfHeight + topHalfBottom) * scale\n    );\n    let trimmedImg = slimImg.roi(topHalfR);\n    cv.cvtColor(trimmedImg, trimmedImg, cv.COLOR_BGR2GRAY);\n\n    console.log(\"trimmed\");\n\n    let name1p = new cv.Point(17 * scale, 6 * scale);\n    let name2p = new cv.Point((17 + 295) * scale, (6 + 26) * scale);\n    let part1p = new cv.Point(16 * scale, 46 * scale);\n    let part2p = new cv.Point((16 + 130) * scale, (46 + 18) * scale);\n    let mainKey1p = new cv.Point(16 * scale, 100 * scale);\n    let mainKey2p = new cv.Point((16 + 130) * scale, (100 + 18) * scale);\n    let mainValue1p = new cv.Point(16 * scale, 118 * scale);\n    let mainValue2p = new cv.Point((16 + 102) * scale, (118 + 32) * scale);\n    let star1p = new cv.Point(16 * scale, 156 * scale);\n    let star2p = new cv.Point((16 + 116) * scale, (156 + 24) * scale);\n    let level1p = new cv.Point(24 * scale, 208 * scale);\n    let level2p = new cv.Point((24 + 32) * scale, (208 + 16) * scale);\n    let substat1p = new cv.Point(32 * scale, 237 * scale);\n    let substat2p = new cv.Point((32 + 198) * scale, (237 + 106) * scale);\n\n    imshowTrimmed(mainKeyImgRef, trimmedImg, 1, -135, mainKey1p, mainKey2p);\n    imshowTrimmed(\n      mainValueImgRef,\n      trimmedImg,\n      0.75,\n      -180,\n      mainValue1p,\n      mainValue2p\n    );\n    imshowTrimmed(starImgRef, trimmedImg, 1, -150, star1p, star2p);\n    imshowTrimmed(levelImgRef, trimmedImg, 1, -150, level1p, level2p);\n    imshowTrimmed(substatImgRef, trimmedImg, 1, 140, substat1p, substat2p);\n    console.log(\"showTextImg\");\n\n    const fname = async () => {\n      imshowTrimmed(nameImgRef, trimmedImg, 0.75, -180, name1p, name2p);\n      let result = await Tesseract.recognize(\n        nameImgRef.current!.toDataURL(),\n        \"jpn\"\n      );\n      setName(`${result.data.text} : ${result.data.confidence}`);\n      cv.rectangle(trimmedImg, name1p, name2p, color, 2, cv.LINE_8, 0);\n    };\n    const fpart = async () => {\n      imshowTrimmed(partImgRef, trimmedImg, 1, -180, part1p, part2p);\n      let result = await Tesseract.recognize(\n        partImgRef.current!.toDataURL(),\n        \"jpn\"\n      );\n      setPart(`${result.data.text} : ${result.data.confidence}`);\n      cv.rectangle(trimmedImg, part1p, part2p, color, 2, cv.LINE_8, 0);\n    };\n\n    const fmainKey = async () => {\n      let result = await Tesseract.recognize(\n        mainKeyImgRef.current!.toDataURL(),\n        \"jpn\"\n      ); //nograyscale\n      setMainKey(`${result.data.text} : ${result.data.confidence}`);\n      cv.rectangle(trimmedImg, mainKey1p, mainKey2p, color, 2, cv.LINE_8, 0);\n    };\n    const fmainValue = async () => {\n      let result = await Tesseract.recognize(\n        mainValueImgRef.current!.toDataURL()\n      );\n      setMainValue(`${result.data.text} : ${result.data.confidence}`);\n      cv.rectangle(\n        trimmedImg,\n        mainValue1p,\n        mainValue2p,\n        color,\n        2,\n        cv.LINE_8,\n        0\n      );\n    };\n\n    const fstar = async () => {\n      let result = await Tesseract.recognize(\n        starImgRef.current!.toDataURL(),\n        \"chi_tra\"\n      );\n      setStar(`${result.data.text} : ${result.data.confidence}`);\n      cv.rectangle(trimmedImg, star1p, star2p, color, 2, cv.LINE_8, 0);\n    };\n\n    const flevel = async () => {\n      let result = await Tesseract.recognize(levelImgRef.current!.toDataURL()); //nograyscale\n      setLevel(`${result.data.text} : ${result.data.confidence}`);\n      cv.rectangle(trimmedImg, level1p, level2p, color, 2, cv.LINE_8, 0);\n    };\n\n    const fsubstat = async () => {\n      let result = await Tesseract.recognize(\n        substatImgRef.current!.toDataURL(),\n        \"jpn\"\n      );\n      setSubstat(`${result.data.text} : ${result.data.confidence}`);\n      cv.rectangle(trimmedImg, substat1p, substat2p, color, 2, cv.LINE_8, 0);\n    };\n\n    const t = async () => {\n      await Promise.all([\n        fname(),\n        fpart(),\n        fmainKey(),\n        fmainValue(),\n        fstar(),\n        flevel(),\n        fsubstat(),\n      ]);\n      cv.imshow(trimmedImgRef.current!, trimmedImg);\n    };\n    t();\n  };\n\n  const imreadUrl = async (url: string): Promise<Mat> => {\n    let e = await loadImage(url);\n    console.log(e.target);\n    return cv.imread(e.target as HTMLElement);\n  };\n\n  const loadImage = (src: string): Promise<Event> => {\n    return new Promise((resolve, reject) => {\n      const i = new Image();\n      i.onload = (e) => resolve(e);\n      i.onerror = (e) => reject(e);\n      i.src = src;\n    });\n  };\n\n  const imshowTrimmed = (\n    ref: React.RefObject<HTMLCanvasElement>,\n    src: cv.Mat,\n    scale: number,\n    threshold: number,\n    p1: cv.Point,\n    p2: cv.Point\n  ) => {\n    let i = src.roi(new Rect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y));\n    cv.resize(\n      i,\n      i,\n      new cv.Size(i.size().width * scale, i.size().height * scale)\n    );\n    cv.threshold(\n      i,\n      i,\n      Math.abs(threshold),\n      255,\n      threshold >= 0 ? cv.THRESH_BINARY : cv.THRESH_BINARY_INV\n    );\n    cv.imshow(ref.current!, i);\n  };\n\n  return (\n    <div>\n      <div style={{ marginTop: \"30px\" }}>\n        <span style={{ marginRight: \"10px\" }}>Select an target file:</span>\n        <input\n          type=\"file\"\n          name=\"file\"\n          accept=\"image/*\"\n          onChange={async (e) => {\n            if (e.target.files && e.target.files[0]) {\n              //setImgUrl(URL.createObjectURL(e.target.files[0]));\n              let i = await imreadUrl(URL.createObjectURL(e.target.files[0]));\n              setImg(i);\n\n              //processImage(e.target.files[0].arrayBuffer());\n              //processImageUrl(URL.createObjectURL(e.target.files[0]));\n            }\n          }}\n        />\n      </div>\n\n      <div style={{ marginTop: \"30px\" }}>\n        <span style={{ marginRight: \"10px\" }}>\n          Open console.log to check result\n        </span>\n      </div>\n\n      <Container maxWidth=\"xs\">\n        <Typography textAlign=\"left\">{good}</Typography>\n      </Container>\n\n      <canvas ref={dummyImgRef} style={{ display: \"none\" }} />\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The text image ↓↓↓{name}</div>\n        <canvas ref={nameImgRef} />\n      </div>\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The text image ↓↓↓{part}</div>\n        <canvas ref={partImgRef} />\n      </div>\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The text image ↓↓↓{mainKey}</div>\n        <canvas ref={mainKeyImgRef} />\n      </div>\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The text image ↓↓↓{mainValue}</div>\n        <canvas ref={mainValueImgRef} />\n      </div>\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The text image ↓↓↓{star}</div>\n        <canvas ref={starImgRef} />\n      </div>\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The text image ↓↓↓{level}</div>\n        <canvas ref={levelImgRef} />\n      </div>\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The text image ↓↓↓{substat}</div>\n        <canvas ref={substatImgRef} />\n      </div>\n\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The template image ↓↓↓</div>\n        <canvas ref={templateImgRef} width={1000} />\n      </div>\n\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The target image ↓↓↓</div>\n        <canvas ref={targetImgRef} style={{ maxWidth: \"80vw\" }} />\n      </div>\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The slim image ↓↓↓</div>\n        <canvas ref={slimImgRef} />\n      </div>\n      <div className=\"image-card\">\n        <div style={{ margin: \"10px\" }}>↓↓↓ The trimmed image ↓↓↓</div>\n        <canvas ref={trimmedImgRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default TemplateMatching;\n"],"names":["similarity","s1","s2","longer","shorter","length","longerLength","editDistance","toLowerCase","costs","Array","i","lastValue","j","newValue","charAt","Math","min","setKey","slotKey","statDef","hp","weight","abri","name","en","ja","table","hp_","atk","atk_","def","def_","eleMas","enerRech_","heal_","critRate_","critDMG_","physical_dmg_","anemo_dmg_","geo_dmg_","electro_dmg_","hydro_dmg_","pyro_dmg_","cryo_dmg_","dendro_dmg_","ERR","icon","undefined","statKey","str2artifactSet","str","lang","maxSim","key_","slot_","forEach","key","a","artifacts","slot","sim","confidence","str2stats","strs","split","filter","str_","targets","replace","includes","push","map","str2stat","datas","console","log","substring","value_","replaceAll","replaceItem","key_i","value","Number","ScanRes2GOOD","scanned","rarity","level","mainstatKey","substats","substat","ArtifactScan","src","scale","left","right","mid","buf","ArtifactScanStr","char","res","set","star","mainstat","mainKey","mainValue","src_","cv","copyTo","aspect","size","width","height","color","dst","mask","result","maxPoint","maxLoc","point","x","cols","y","rows","maxPoint2","point2","slimRect","slimImg","roi","midSeparator","topHalfR","trimmedImg","name1p","name2p","part1p","part2p","mainKey1p","mainKey2p","mainValue1p","mainValue2p","star1p","star2p","level1p","level2p","substat1p","substat2p","createWorker","logger","m","worker","loadLanguage","initialize","fname","imshowTrimmed","recognize","current","toDataURL","data","text","fslot","fmainKey","fmainValue","fstar","flevel","fsubstat","terminate","ref","threshold","p1","p2","Rect","abs","targetImgRef","useRef","templateImgRef","slimImgRef","trimmedImgRef","nameImgRef","partImgRef","mainKeyImgRef","mainValueImgRef","starImgRef","levelImgRef","substatImgRef","dummyImgRef","useState","part","good","setGood","img","setImg","templateImgs","setTemplateImgs","useEffect","loadTemplate","imreadUrl","i1","i2","i3","t","JSON","stringify","url","loadImage","e","target","Promise","resolve","reject","Image","onload","onerror","style","marginTop","marginRight","type","accept","onChange","files","URL","createObjectURL","Container","maxWidth","Typography","textAlign","display","className","margin"],"sourceRoot":""}